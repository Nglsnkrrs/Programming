#include "TestManager.h"

TestManager::TestManager()
{
    this->currentTestIndex = 0;
    this->currentQuestionIndex = 0;
    this->correctAnswersCount = 0;
    this->selectedAnswer = 0;

    this->rightAnswers = gcnew array<array<int>^>(5);
    this->rightAnswers[0] = gcnew array<int>{ 2, 3, 4, 1, 3, 4, 3, 1, 2, 4 };
    this->rightAnswers[1] = gcnew array<int>{ 2, 1, 2, 3, 4, 3, 2, 2, 4, 1 };
    this->rightAnswers[2] = gcnew array<int>{ 3, 2, 3, 3, 1, 2, 2, 2, 1, 2 };
    this->rightAnswers[3] = gcnew array<int>{ 3, 2, 1, 3, 3, 2, 3, 4, 3, 3 };
    this->rightAnswers[4] = gcnew array<int>{ 1, 2, 3, 2, 3, 2, 3, 3, 2, 3 };

    this->questions = gcnew array<array<String^>^>(5);
    this->questions[0] = gcnew array<String^>
    {
        "Дуги в графе - это",
        "Множество – это",
        "Отношение взаимодостижимости на графе есть",
        "Для выделения компонент связности можно использовать",
        "В любом дереве",
        "В произвольном дереве можно выделить",
        "Граф с петлями и кратными ребрами называется",
        "В любом произвольном неорграфе число вершин нечетной степени",
        "В орграфе G вершина x инцидентна дуге v если",
        "Точки графа называются"
    };
    this->questions[1] = gcnew array<String^>
    {
        "Какое из перечисленных свойств относится к функции y = x*cos(x)",
        "Первая производная функции показывает",
        "Угловой коэффициент касательной, проведенной к графику функции в некоторой точке, равен",
        "Дифференциал функции равен",
        "Дифференциал постоянной равен",
        "Функция нескольких переменных является дифференцируемой, если",
        "Смешанная производная функции двух переменных равна нулю, если",
        "Интеграл от производной функции на заданном интервале равен",
        "Если функция непрерывна на отрезке, то она обладает свойством",
        "График функции y = ln(x) проходит через точку"
    };

    this->questions[2] = gcnew array<String^>
    {
        "Какой вариант является правильным переводом фразы ""Я люблю читать книги""?",
        "Выберите правильную форму глагола: ""She ______ to school every day.""",
        "Какой предлог следует использовать в предложении: ""He was born ______ December""?",
        "Найдите синоним слова ""happy""",
        "Что означает выражение ""How are you ?""",
        "Найдите ошибку в предложении: ""He don't like coffee.""",
        "Какой артикль следует использовать перед словом ""apple""?",
        "Какой вариант правильный: ""If I ______ rich, I would travel the world.""",
        "Найдите правильный перевод: ""My sister works as a teacher.""",
        "Что означает фраза ""Turn off the light""?"
    };
    this->questions[3] = gcnew array<String^>
    {
        "Укажите слово, в котором количество букв и звуков совпадает",
        "Какое из предложений написано правильно?",
        "Укажите правильный вариант окончания: ""В детской комнате лежали игрушки и кукл___.""",
        "Найдите слово с чередующейся гласной в корне",
        "Какое из слов пишется через дефис?",
        "Укажите верное раздельное написание",
        "Определите, где правильно расставлены запятые: ""Вечером, когда стемнело, мы отправились домой.""",
        "Укажите предложение с грамматической ошибкой",
        "Как правильно пишется слово?",
        "Какое из слов является прилагательным?"
    };
    this->questions[4] = gcnew array<String^>
    {
        "Что возвращает функция len() в Python?",
        "Какой символ используется для комментария в языке C++?",
        "Как называется механизм, позволяющий одному классу наследовать свойства и методы другого класса?",
        "Какой результат будет в Python: print(2 ** 3)?",
        "В языке JavaScript, какой оператор используется для строгого сравнения?",
        "Что выведет следующий код на Python \nlist1 = [1, 2, 3]\nlist2 = list1\nlist1.append(4)\nprint(list2)",
        "Какая структура данных работает по принципу LIFO?",
        "Какое ключевое слово используется для создания функции в языке Python?",
        "Что делает оператор break в языке C++?",
        "В SQL, какой командой можно выбрать все столбцы из таблицы ""users""?"
    };
    this->answers = gcnew array<array<String^, 2>^>(5);
    this->answers[0] = gcnew array<String^, 2>
    {
        {"Неорентированные ребра","Ориентированные ребра","Кратные ребра","Смежные ребра" },
        { "Набор каких-либо элементов","Перечень одинаковых элементов",
            "Совокупность элементов, \nобладающих некоторым признаком, свойством","Совокупность чисел" },
        { "Отношение эквивалентности","Отношение простого порядка", 
            "Отношение строгого порядка","Отношение эквивалентности" },
        { "Алгоритм Флойда","Алгоритм обхода графа «в глубину»", 
            "Алгоритм Дейкстры","Нет правильного ответа" },
        { "Хотя бы одна висячая вершина", "Хотя бы две висячие вершины",
            "Ровно n-1 висячая вершина", "Нет висячих вершин" },
        { "Как простую цепь, \nтак и цепь, не являющуюся простой","Только простую цепь", 
            "Только простой цикл","Как простой цикл, \nтак и цикл, не являющийся простым" },
        { "Графом","Псевдографом","Мультиграфом","Недографом" },
        { "Всегда есть","Всегда четно","Всегда нечетно","Произвольно" },
        { "Вершина x — начало дуги v", "Вершина x либо начало дуги v, \nлибо конец дуги v", 
            "Вершина x конец дуги v","Нет правильного ответа" },
        { "Ребрами графа", "Пунктами графа", "Вершинами графа", "Узлами графа" }
    };
    this->answers[1] = gcnew array<String^, 2>
    {
        { "Функция является чётной", "Функция является нечётной", 
            "Функция является функцией общего вида", "Функция является периодической" },
        { "Скорость изменения функции","Направление функции","Приращение функции",
            "Приращение аргумента функции"},
        { "Отношению значения функции \nк значению аргумента в этой точке",
            "Значению производной функции в этой точке","Значению дифференциала функции в этой точке",
            "Значению функции в этой точке"},
        { "Отношению приращения функции к приращению аргумента",
            "Произведению приращения функции на приращение аргумента",
            "Произведению производной на приращение аргумента","Приращению аргумента"},
        { "Этой постоянной","Бесконечно большой величине","Невозможно определить","Нулю"},
        { "Существует полное приращение функции","Существует полный дифференциал функции",
            "Функция непрерывна по всем аргументам","Частная производная по одной из переменных равна нулю"},
        { "Функция является непрерывной","Функция дважды дифференцируема",
            "Частные производные второго порядка равны","Все частные производные первого порядка равны"},
        { "Производной от интеграла функции",
            "Разности значений функции на концах интервала",
            "Произведению функции на длину интервала","Площади под графиком производной"},
        { "Существования предела в каждой точке отрезка","Дифференцируемости на всём отрезке",
            "Равномерной непрерывности","Достижения максимума и минимума на отрезке"},
        { "(1, 0)","(0, 1)","(1, 1)","(e, 0)"}
    };
    this->answers[2] = gcnew array<String^, 2>
    {
        {"I love read books","I loves reading books",
            "I love reading books","I am love reading books"},
        {"Go","Goes","Going","Gone"},
        {"At","On","In","Of"},
        {"Sad","Angry","Joyful","Nervous"},
        {"Как дела?","Сколько тебе лет?","Что ты делаешь?","Кто ты?"},
        {"Правильно","Ошибка в слове ""don't""",
            "Ошибка в слове ""coffee""","Ошибка в слове ""like"""},
        {"A","An","The","(нет артикля)"},
        {"Was","Were","Am","Is"},
        {"Моя сестра работает учителем","Моя сестра любит учиться",
            "Моя сестра ищет работу","Моя сестра стала ученицей"},
        {"Включите свет","Выключите свет","Поверните свет","Не трогайте свет"}
    };
    this->answers[3] = gcnew array<String^, 2>
    {
        {"Солнце","Кот","Ёж","Листья"},
        {"В саду росли яблони и грушы","В саду росли яблони и груши",
            "В саду росли яблани и груши","В саду росли яблонь и груши"},
        {"Ы","И","А","Е"},
        {"Гора","Лес","Расти","Тихий"},
        {"Кто нибудь","В кое веке","По-моему","Где то"},
        {"Незачем","На встречу","Насквозь","Навстречу"},
        {"Запятые не нужны","Запятая после ""вечером""",
            "Запятые после ""вечером"" и ""стемнело""","Только запятая после ""стемнело"""},
        {"Она легла спать рано","Надев пальто, он вышел из дома",
            "Я не хочу ни о чём беспокоиться","Они были рады, что встретились друг с другом"},
        {"Превелегия","Привелегия","Привилегия","Превилегия"},
        {"Бег","Бегущий","Быстрый","Бегать"}
    };
    this->answers[4] = gcnew array<String^, 2>
    {
        {"Длину списка или строки","Сумму элементов списка",
            "Тип данных переменной","Индекс первого элемента"},
        {"#","//","<!-- -->","/* */"},
        {"Полиморфизм","Инкапсуляция","Наследование","Абстракция"},
        {"6","8","9","Ошибка"},
        {"=","==","===","!=="},
        {"[1, 2, 3]","[1, 2, 3, 4]","Ошибка","[4]"},
        {"Очередь (Queue)","Список (List)","Стек (Stack)","Множество (Set)"},
        {"func","define","def","function"},
        {"Завершает выполнение текущей функции","Завершает выполнение цикла",
            "Переходит к следующей итерации цикла","Вызывает ошибку завершения программы"},
        {"SELECT users FROM *","GET ALL FROM users","SELECT * FROM users","FETCH * FROM users"}
    };
}

void TestManager::SwitchToTest(int testIndex)
{
    this->currentTestIndex = testIndex;
    this->currentQuestionIndex = 0;
    this->correctAnswersCount = 0;
}

bool TestManager::NextQuestion()
{
    if ((this->selectedAnswer + 1) == this->rightAnswers[this->currentTestIndex][this->currentQuestionIndex])
    {
        this->correctAnswersCount++;
    }


    this->currentQuestionIndex++;

    if (this->currentQuestionIndex >= this->questions[this->currentTestIndex]->Length)
    {
        return false;
    }

    return true;
}

String^ TestManager::GetCurrentQuestion()
{
    return this->questions[this->currentTestIndex][this->currentQuestionIndex];
}

array<String^>^ TestManager::GetCurrentAnswers()
{
    return gcnew array<String^>{
        this->answers[this->currentTestIndex][this->currentQuestionIndex, 0],
            this->answers[this->currentTestIndex][this->currentQuestionIndex, 1],
            this->answers[this->currentTestIndex][this->currentQuestionIndex, 2],
            this->answers[this->currentTestIndex][this->currentQuestionIndex, 3]
    };
}


void TestManager::SetSelectedAnswer(int answer)
{
    this->selectedAnswer = answer;
}

int TestManager::GetCorrectAnswersCount()
{
    return this->correctAnswersCount;
}

void TestManager::Reset()
{
    this->currentQuestionIndex = 0;
    this->correctAnswersCount = 0;
}

int TestManager::GetCurrentQuestionIndex()
{
    return this->currentQuestionIndex;
}
